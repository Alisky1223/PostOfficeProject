@page "/EditProduct"
@using CommonDll.Dto
@using MudBlazor
@using System.Net.Http.Json
@using System.Globalization
@using System.Reflection
@using System.Threading
@using System.Diagnostics.Metrics
@using PostOfficeBackendProject.src.Application.Dto
@using PostOfficeFrontendProject__all_interactive.Interface
@inject HttpClient httpClient
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IDataPassHelper dataHelper
@inject IDialogService DialogService
@inject IProductsMiddelware productsMiddelware
@inject IProductDropdownMiddelware productDropdownMiddelware

<MudRTLProvider RightToLeft="@_rightToLeft">

    <MudItem Class="d-flex align-center justify-center mud-theme-primary mud-elevation-25" Style="height:60px; width:100%; margin-top:0px; margin-bottom:20px;">
     
        <MudText Typo="Typo.h5">ویرایش مرسوله</MudText>
  
    </MudItem>

    <MudForm @ref="form">

        <MudPaper Class="d-flex flex-wrap align-start justify-center gap-4" Style="margin-bottom:20px;padding:20px" Elevation="25">

            <MudItem Style="width:20%">
             
                <MudTextField @bind-Value="EditedProduct.ProductName" Label="کد مرسوله" Variant="Variant.Outlined" Immediate="true" Required></MudTextField>
        
            </MudItem>

            <MudItem Style="width:20%">
            
                <MudTextField @bind-Value="EditedProduct.Price" Label="ارزش مرسوله" Variant="Variant.Outlined" Immediate="true" Required></MudTextField>
        
            </MudItem>

            <MudItem Style="width:20%">

                <MudTextField @bind-Value="EditedProduct.Description" Label="توضیحات مرسوله" Variant="Variant.Outlined" Immediate="true" Required></MudTextField>
           
            </MudItem>

            <MudItem Style="width:20%">

                <MudSelect T="ProductTypeDto" ToStringFunc="@ProductTypeDtoConverter" @bind-Value="EditedProduct.ProductType" MultiSelection="false" Label="نوع مرسوله" AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined" Clearable Required>
               
                    @foreach (var productType in ProductTypes)
                    {

                        <MudSelectItem Value="productType"> @productType?.Type</MudSelectItem>
                 
                    }
               
                </MudSelect>

            </MudItem>

            <MudItem Style="width:20%">

                <MudSelect T="TransportStatusDto" ToStringFunc="@TransportStatusDtoConverter" @bind-Value="EditedProduct.TransportStatus" MultiSelection="false" Label="وضعیت مرسوله" AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined" Clearable Required>

                    @foreach (var productStatus in ProductStatus)
                    {

                        <MudSelectItem Value="productStatus"> @productStatus?.Status</MudSelectItem>

                    }

                </MudSelect>

            </MudItem>

        </MudPaper>

    </MudForm>

    <MudPaper Elevation="0" Class="d-flex align-center" Style="margin-top:20px">

        <MudButton Style="margin-left:20px" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Large" OnClick="EditProducts">ذخیره تغییرات</MudButton>

        <MudButton Variant="Variant.Filled" Color="Color.Secondary" Size="Size.Large" OnClick="CanceleOpration">لغو</MudButton>

        <MudButton Class="main-button" Variant="Variant.Filled" Color="Color.Tertiary" Size="Size.Large" OnClick="GoToMainPage">بازگشت به صفحه اصلی</MudButton>

    </MudPaper>

</MudRTLProvider>

<style>

    .main-button {
        position: fixed;
        left: 15px;
    }

</style>

@code {

    #region Props

    private MudForm form;

    private bool _rightToLeft = true;

    private ProductDto EditedProduct = new ProductDto();

    private List<ProductTypeDto> ProductTypes = new();

    private List<TransportStatusDto> ProductStatus = new();

    Func<ProductTypeDto, string> ProductTypeDtoConverter = p => p?.Type;

    Func<TransportStatusDto, string> TransportStatusDtoConverter = p => p?.Status;

    protected override async Task OnInitializedAsync()
    {
        await GetData();
    }

    #endregion

    #region LoadOffice

    private async Task GetData()
    {
        EditedProduct = await productsMiddelware.GetByIdAsync(dataHelper.GetProudctId());

        ProductTypes = await productDropdownMiddelware.GetAllProductTypeAsync();

        ProductStatus = await productDropdownMiddelware.GetAllStatusAsync();

        StateHasChanged();

    }

    #endregion

    #region SubmitOrCancele

    private async Task EditProducts()
    {

        await form.Validate();

        if (form.IsValid)
        {

            var update = new ProductUpdateAndCreateDto
                {
                    PostOfficeId = EditedProduct.Id,
                    ProductName = EditedProduct.ProductName,
                    Price = EditedProduct.Price,
                    Description = EditedProduct.Description,
                    ProductTypeId = EditedProduct.ProductType.Id,
                    TransportStatusId = EditedProduct.TransportStatus.Id,
                };

            await productsMiddelware.UpdateProductAsync(dataHelper.GetProudctId(), update);

            Snackbar.Add("تغییرات با موفقیت ذخیره شد.", Severity.Success);

            NavigationManager.NavigateTo("/PostOfficeProducts");
        }

        else
        {
            Snackbar.Add("لطفاً تمام فیلدهای ضروری را تکمیل کنید.", Severity.Error);
        }
    }

    private void CanceleOpration()
    {

        NavigationManager.NavigateTo("/PostOfficeProducts");

    }

    #endregion

    #region GoToMainPage

    private void GoToMainPage()
    {

        NavigationManager.NavigateTo("/");

    }

    #endregion

}
